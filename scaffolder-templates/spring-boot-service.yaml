apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: spring-boot-service-template
  title: Spring Boot Service
  description: Create a new Spring Boot microservice for Eulen platform
  tags:
    - java
    - spring-boot
    - backend
    - microservice
spec:
  owner: team-eulen-backend
  type: service
  
  parameters:
    - title: Service Information
      required:
        - name
        - description
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the service
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: Help others understand what this service is for
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group
          default: team-eulen-backend
        groupId:
          title: Maven Group ID
          type: string
          description: Maven group ID
          default: com.ayesa.eulen
        artifactId:
          title: Maven Artifact ID
          type: string
          description: Maven artifact ID
        javaVersion:
          title: Java Version
          type: string
          description: Java version to use
          enum:
            - '17'
            - '21'
          default: '17'
        springBootVersion:
          title: Spring Boot Version
          type: string
          description: Spring Boot version
          default: '3.2.0'
    
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOwners:
              - AngC1

  steps:
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./skeleton/spring-boot
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          groupId: ${{ parameters.groupId }}
          artifactId: ${{ parameters.artifactId }}
          javaVersion: ${{ parameters.javaVersion }}
          springBootVersion: ${{ parameters.springBootVersion }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}

    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        description: ${{ parameters.description }}
        repoUrl: ${{ parameters.repoUrl }}
        defaultBranch: main
        repoVisibility: public
        deleteBranchOnMerge: true
        allowRebaseMerge: true
        allowSquashMerge: true

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
